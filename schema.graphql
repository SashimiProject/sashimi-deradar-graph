type Token @entity {
  # token address
  id: ID!

  # mirrored from the smart contract
  symbol: String!
  name: String!
  decimals: BigInt!

  # used for other stats like marketcap
  totalSupply: BigDecimal!
  burned: BigDecimal!
}

type Transaction @entity {
  id: ID! # txn hash
  blockNumber: BigInt!
  timestamp: BigInt!
}

type TransferDayData @entity {
  id: ID! # token address + timestamp rounded to current day by dividing by 86400
  date: Int!
  token: Token!
  totalVolume: BigDecimal!
  txsCount: BigInt!
}

type TransferHourData @entity {
  id: ID! # token address + timestamp start of an hour
  date: Int!
  token: Token!
  totalVolume: BigDecimal!
  txsCount: BigInt!
}

type VaultInfo @entity {
  # dforce strategy contract address
  id: ID!
  depositToken: Token!
  earnToken: Token!
  depositAmount: BigDecimal!
  earnAmount: BigDecimal!
}

type OldInvestment @entity {
  # profit token address
  id: ID!
  earnToken: Token!
  earnAmount: BigDecimal!
}

type NewInvestment @entity {
  id: ID!
  earnToken: Token!
  earnAmount: BigDecimal!
}

type ChefInfo @entity {
  id: ID!
  totalPoint: BigInt!
  sashimiPerBlock: BigDecimal!
  startBlock: BigInt!
}

type FarmPool @entity {
  id: ID! # pid
  isUni: Boolean!
  lpToken: Token!
  token0: Token!
  token1: Token!
  allocPoint: BigInt!
  totalDeposit: BigDecimal!
  totalDepositUSD: BigDecimal!
  lpSupplyPercent: BigDecimal!
  volume: BigDecimal!
}
